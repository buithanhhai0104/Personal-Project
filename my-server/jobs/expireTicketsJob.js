const Ticket = require("../src/models/ticketsModel");
const Trip = require("../src/models/tripsModel");
const moment = require("moment");

function startExpireTicketsJob() {
  console.log("üîÑ Ki·ªÉm tra v√© h·∫øt h·∫°n...");

  // L·∫•y danh s√°ch v√© ch∆∞a thanh to√°n
  Ticket.getUnpaidTickets((err, tickets) => {
    if (err) {
      console.error("‚ùå L·ªói khi l·∫•y v√© ch∆∞a thanh to√°n:", err);
      return;
    }

    const tripsToUpdate = {};

    // Duy·ªát qua t·ª´ng v√© ƒë·ªÉ ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
    tickets.forEach((ticket) => {
      const currentTime = moment();
      const expiresAt = moment(ticket.expires_at);

      if (currentTime.isAfter(expiresAt)) {
        console.log(`‚è≥ V√© ${ticket.ticket_id} ƒë√£ h·∫øt h·∫°n`);

        if (!tripsToUpdate[ticket.trip_id]) {
          tripsToUpdate[ticket.trip_id] = [];
        }
        tripsToUpdate[ticket.trip_id].push(ticket);
      }
    });

    // Duy·ªát qua c√°c chuy·∫øn ƒëi c·∫ßn c·∫≠p nh·∫≠t gh·∫ø
    Object.keys(tripsToUpdate).forEach((tripId) => {
      Trip.getTripById(tripId, (err, results) => {
        if (err) {
          console.error(`‚ùå L·ªói khi l·∫•y th√¥ng tin chuy·∫øn ƒëi ${tripId}:`, err);
          return;
        }

        if (!results || results.length === 0) {
          console.error(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y chuy·∫øn ƒëi ${tripId}`);
          return;
        }

        let trip = results[0];
        let seats = [];
        console.log(trip.seats, "&&", JSON.parse(trip.seats));
        try {
          seats = trip.seats ? JSON.parse(trip.seats) : [];
          if (!Array.isArray(seats))
            throw new Error("‚ö†Ô∏è D·ªØ li·ªáu seats kh√¥ng h·ª£p l·ªá");
        } catch (error) {
          console.error(
            `‚ùå L·ªói khi parse danh s√°ch gh·∫ø c·ªßa chuy·∫øn ${tripId}:`,
            error
          );
          return;
        }

        console.log(
          `üìå Danh s√°ch gh·∫ø tr∆∞·ªõc khi c·∫≠p nh·∫≠t cho trip ${tripId}:`,
          seats
        );

        tripsToUpdate[tripId].forEach((ticket) => {
          let seatNumbers = ticket.seat_number
            ? ticket.seat_number.split(",").map((s) => s.trim()) // H·ªó tr·ª£ nhi·ªÅu gh·∫ø
            : [];

          // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø
          let updatedSeats = seats.map((seat) => {
            if (seatNumbers.includes(seat.seat_number)) {
              return { ...seat, status: "available" }; // Gi·ªØ nguy√™n object, ch·ªâ thay ƒë·ªïi tr·∫°ng th√°i
            }
            return seat;
          });

          console.log(
            `üöÄ Gh·∫ø sau khi c·∫≠p nh·∫≠t cho trip ${tripId}:`,
            JSON.stringify(updatedSeats)
          );

          // C·∫≠p nh·∫≠t gh·∫ø tr∆∞·ªõc khi c·∫≠p nh·∫≠t tr·∫°ng th√°i v√©
          Trip.updateTripSeats(tripId, JSON.stringify(updatedSeats), (err) => {
            if (err) {
              console.error(
                `‚ùå L·ªói khi c·∫≠p nh·∫≠t gh·∫ø cho chuy·∫øn ƒëi ${tripId}:`,
                err
              );
              return;
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√© sau khi c·∫≠p nh·∫≠t gh·∫ø th√†nh c√¥ng
            Ticket.updateTicketStatus(
              {
                ticket_id: ticket.ticket_id,
                status: "H·ªßy ƒë·∫∑t v√© do ch∆∞a thanh to√°n",
              },
              (err) => {
                if (err) {
                  console.error(
                    `‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i v√© ${ticket.ticket_id}:`,
                    err
                  );
                  return;
                }
                console.log(
                  `‚úÖ V√© ${ticket.ticket_id} ƒë√£ b·ªã h·ªßy do ch∆∞a thanh to√°n.`
                );
              }
            );
          });
        });
      });
    });
  });
}

module.exports = { startExpireTicketsJob };

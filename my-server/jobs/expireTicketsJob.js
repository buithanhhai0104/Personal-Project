const Ticket = require("../src/models/ticketsModel");
const Trip = require("../src/models/tripsModel");
const moment = require("moment");

async function startExpireTicketsJob() {
  console.log("üîÑ Ki·ªÉm tra v√© h·∫øt h·∫°n...");

  try {
    const tickets = await new Promise((resolve, reject) => {
      Ticket.getUnpaidTickets((err, data) => {
        if (err) reject(err);
        else resolve(data);
      });
    });

    if (!tickets.length) {
      console.log("‚úÖ Kh√¥ng c√≥ v√© n√†o c·∫ßn h·ªßy.");
      return;
    }

    const tripsToUpdate = {};

    tickets.forEach((ticket) => {
      const currentTime = moment();
      const expiresAt = moment(ticket.expires_at);

      if (currentTime.isAfter(expiresAt)) {
        console.log(`‚è≥ V√© ${ticket.ticket_id} ƒë√£ h·∫øt h·∫°n`);
        if (!tripsToUpdate[ticket.trip_id]) tripsToUpdate[ticket.trip_id] = [];
        tripsToUpdate[ticket.trip_id].push(ticket);
      }
    });

    if (Object.keys(tripsToUpdate).length === 0) {
      console.log("‚úÖ Kh√¥ng c√≥ chuy·∫øn xe n√†o c·∫ßn c·∫≠p nh·∫≠t.");
      return;
    }

    await Promise.all(
      Object.keys(tripsToUpdate).map(async (tripId) => {
        try {
          const trip = await new Promise((resolve, reject) => {
            Trip.getTripById(tripId, (err, data) => {
              if (err) reject(err);
              else resolve(data[0]); // Fix: Tr·∫£ v·ªÅ ch√≠nh x√°c object
            });
          });

          if (!trip) {
            console.error(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y chuy·∫øn ƒëi ${tripId}`);
            return;
          }

          console.log(`üìå Trip ${tripId} - seats data t·ª´ DB:`, trip.seats);

          let seats;
          if (typeof trip.seats === "string") {
            try {
              seats = JSON.parse(trip.seats);
            } catch (error) {
              console.error(
                `‚ùå L·ªói khi parse JSON seats c·ªßa trip ${tripId}:`,
                error
              );
              return;
            }
          } else if (Array.isArray(trip.seats)) {
            seats = trip.seats; // N·∫øu ƒë√£ l√† array th√¨ gi·ªØ nguy√™n
          } else {
            console.error(`‚ùå D·ªØ li·ªáu seats c·ªßa trip ${tripId} kh√¥ng h·ª£p l·ªá`);
            return;
          }

          console.log(`üìå Gh·∫ø tr∆∞·ªõc khi c·∫≠p nh·∫≠t trip ${tripId}:`, seats);

          // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø
          const updatedSeats = seats.map((seat) => {
            tripsToUpdate[tripId].forEach((ticket) => {
              let seatNumbers = ticket.seat_number
                ? ticket.seat_number.split(",").map((s) => s.trim())
                : [];
              if (seatNumbers.includes(seat.seat_number)) {
                seat.status = "available";
              }
            });
            return seat;
          });

          console.log(`üöÄ Gh·∫ø sau khi c·∫≠p nh·∫≠t trip ${tripId}:`, updatedSeats);

          await Promise.all([
            new Promise((resolve, reject) => {
              Trip.updateTripSeats(
                tripId,
                JSON.stringify(updatedSeats),
                (err) => {
                  if (err) reject(err);
                  else resolve();
                }
              );
            }),
            ...tripsToUpdate[tripId].map(
              (ticket) =>
                new Promise((resolve, reject) => {
                  Ticket.updateTicketStatus(
                    {
                      ticket_id: ticket.ticket_id,
                      status: "H·ªßy ƒë·∫∑t v√© do ch∆∞a thanh to√°n",
                    },
                    (err) => {
                      if (err) {
                        console.error(
                          `‚ùå L·ªói c·∫≠p nh·∫≠t v√© ${ticket.ticket_id}:`,
                          err
                        );
                        reject(err);
                      } else {
                        console.log(`‚úÖ V√© ${ticket.ticket_id} ƒë√£ b·ªã h·ªßy.`);
                        resolve();
                      }
                    }
                  );
                })
            ),
          ]);
        } catch (error) {
          console.error(`‚ùå L·ªói khi x·ª≠ l√Ω chuy·∫øn xe ${tripId}:`, error);
        }
      })
    );

    console.log("‚úÖ ƒê√£ x·ª≠ l√Ω t·∫•t c·∫£ v√© h·∫øt h·∫°n.");
  } catch (error) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra v√© h·∫øt h·∫°n:", error);
  }
}

module.exports = { startExpireTicketsJob };

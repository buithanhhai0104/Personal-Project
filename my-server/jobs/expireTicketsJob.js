const Ticket = require("../src/models/ticketsModel");
const Trip = require("../src/models/tripsModel");
const moment = require("moment");

function startExpireTicketsJob() {
  console.log("üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra v√© h·∫øt h·∫°n...");

  Ticket.getUnpaidTickets((err, tickets) => {
    if (err) {
      console.error("‚ùå L·ªói khi l·∫•y v√© ch∆∞a thanh to√°n:", err);
      return;
    }

    console.log(`üìå T·ªïng s·ªë v√© ch∆∞a thanh to√°n: ${tickets.length}`);
    if (tickets.length === 0) return;

    const tripsToUpdate = {};

    tickets.forEach((ticket) => {
      console.log(`üéü Ki·ªÉm tra v√© ID: ${ticket.ticket_id}`);

      const currentTime = moment();
      const expiresAt = moment(ticket.expires_at);

      if (currentTime.isAfter(expiresAt)) {
        console.log(`‚è≥ V√© ${ticket.ticket_id} ƒë√£ h·∫øt h·∫°n!`);
        if (!tripsToUpdate[ticket.trip_id]) {
          tripsToUpdate[ticket.trip_id] = [];
        }
        tripsToUpdate[ticket.trip_id].push(ticket);
      }
    });

    console.log(
      `üìå C·∫ßn c·∫≠p nh·∫≠t ${Object.keys(tripsToUpdate).length} chuy·∫øn ƒëi.`
    );

    Object.keys(tripsToUpdate).forEach((tripId) => {
      console.log(`üîç L·∫•y d·ªØ li·ªáu chuy·∫øn ƒëi ID: ${tripId}`);
      Trip.getTripById(tripId, (err, results) => {
        if (err) {
          console.error(`‚ùå L·ªói khi l·∫•y chuy·∫øn ƒëi ${tripId}:`, err);
          return;
        }

        if (!results || results.length === 0) {
          console.error(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y chuy·∫øn ƒëi ${tripId}`);
          return;
        }

        let trip = results[0];
        let seats;

        try {
          console.log(`üìå D·ªØ li·ªáu seats c·ªßa chuy·∫øn ${tripId}:`, trip.seats);

          seats =
            typeof trip.seats === "string"
              ? JSON.parse(trip.seats)
              : trip.seats;
          if (!Array.isArray(seats))
            throw new Error("‚ùå D·ªØ li·ªáu seats kh√¥ng h·ª£p l·ªá!");
        } catch (error) {
          console.error(
            `‚ö†Ô∏è L·ªói khi parse danh s√°ch gh·∫ø c·ªßa chuy·∫øn ${tripId}:`,
            error
          );
          return;
        }

        console.log(`‚úÖ T·ªïng s·ªë gh·∫ø trong trip ${tripId}: ${seats.length}`);

        tripsToUpdate[tripId].forEach((ticket) => {
          console.log(`üéü X·ª≠ l√Ω v√©: ${ticket.ticket_id}`);

          let seatNumbers = [];
          try {
            if (typeof ticket.seat_numbers === "string") {
              seatNumbers = JSON.parse(ticket.seat_numbers);
            }
          } catch (error) {
            seatNumbers = ticket.seat_numbers.split(",").map((s) => s.trim());
          }

          console.log(`üìå Gh·∫ø c·∫ßn c·∫≠p nh·∫≠t:`, seatNumbers);

          if (!Array.isArray(seatNumbers) || seatNumbers.length === 0) {
            console.error(`‚ö†Ô∏è V√© ${ticket.ticket_id} kh√¥ng c√≥ s·ªë gh·∫ø h·ª£p l·ªá.`);
            return;
          }

          let updatedSeats = seats.map((seat) => {
            if (seatNumbers.includes(seat.seat_number)) {
              seat.status = "available";
            }
            return seat;
          });

          console.log(
            `üîÑ Seats sau khi c·∫≠p nh·∫≠t cho trip ${tripId}:`,
            JSON.stringify(updatedSeats)
          );

          Trip.updateTripSeats(tripId, JSON.stringify(updatedSeats), (err) => {
            if (err) {
              console.error(
                `‚ùå L·ªói khi c·∫≠p nh·∫≠t gh·∫ø cho chuy·∫øn ƒëi ${tripId}:`,
                err
              );
              return;
            }

            console.log(
              `‚úÖ Gh·∫ø c·ªßa chuy·∫øn ${tripId} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!`
            );

            Ticket.updateTicketStatus(
              {
                ticket_id: ticket.ticket_id,
                status: "H·ªßy ƒë·∫∑t v√© do ch∆∞a thanh to√°n",
              },
              (err) => {
                if (err) {
                  console.error(
                    `‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i v√© ${ticket.ticket_id}:`,
                    err
                  );
                  return;
                }
                console.log(
                  `üö´ V√© ${ticket.ticket_id} ƒë√£ b·ªã h·ªßy do ch∆∞a thanh to√°n.`
                );
              }
            );
          });
        });
      });
    });
  });
}

module.exports = { startExpireTicketsJob };

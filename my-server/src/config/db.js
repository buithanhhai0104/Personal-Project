const mysql = require("mysql2");
require("dotenv").config();

const db = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT || 3306,
  waitForConnections: true,
  connectionLimit: 5,
  queueLimit: 0,
});

db.getConnection((err, connection) => {
  if (err) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi MySQL:", err);
    setTimeout(() => {
      console.log("üîÑ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...");
      db.getConnection((retryErr, retryConnection) => {
        if (retryErr) {
          console.error("üö® Th·ª≠ k·∫øt n·ªëi l·∫°i th·∫•t b·∫°i:", retryErr);
        } else {
          console.log("‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng sau khi th·ª≠ l·∫°i!");
          retryConnection.release();
        }
      });
    }, 5000); // Th·ª≠ l·∫°i sau 5 gi√¢y
    return;
  }
  console.log("‚úÖ K·∫øt n·ªëi MySQL th√†nh c√¥ng!");

  // S·ª≠ d·ª•ng giao d·ªãch
  connection.beginTransaction((err) => {
    if (err) {
      connection.release();
      console.error("‚ùå L·ªói b·∫Øt ƒë·∫ßu giao d·ªãch:", err);
      return;
    }

    // Th·ª±c hi·ªán c√°c truy v·∫•n trong giao d·ªãch
    connection.query("YOUR SQL QUERY HERE", (queryErr, results) => {
      if (queryErr) {
        connection.rollback(() => {
          console.error("‚ùå L·ªói trong giao d·ªãch, rollback:", queryErr);
          connection.release();
        });
        return;
      }

      // N·∫øu truy v·∫•n th√†nh c√¥ng, commit giao d·ªãch
      connection.commit((commitErr) => {
        if (commitErr) {
          connection.rollback(() => {
            console.error("‚ùå L·ªói commit giao d·ªãch, rollback:", commitErr);
            connection.release();
          });
          return;
        }
        console.log("‚úÖ Giao d·ªãch th√†nh c√¥ng!");
        connection.release();
      });
    });
  });
});

module.exports = db;
